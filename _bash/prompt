# ---------------------------------------------------------------------------
# (NMN) BASH Environment - Custom Prompt
# ---------------------------------------------------------------------------
# @version    $Revision$
# @package    NMN-BASH-Environment
# @subpackage Profile
# @author     Norman Georg <norm@ngeorg.com>
# @license    http://ngeorg.com/license.html
# @copyright  (c) 2000-2010, Norman Georg, (NMN) IT-Consulting & Development
# ---------------------------------------------------------------------------
# ::::::::::::::::::: vim: set noai noet ru nu ml fenc=utf-8 ts=4 sw=4 tw=0:
# ---------------------------------------------------------------------------
# set +x
[[ $NMN_DEBUG_PROFILE > 0 ]] && \
	echo " Sourcing BASH custom prompt: ~/.bash/prompt"

# ----------------------------------------------------------------------------
#  ::: PROMPT PWD TRIMMER :::::::::::::::::::::::::::::::::::::::::::::::::::
# ----------------------------------------------------------------------------
function nmn_PromptTrimWorkingDir
{
	local MAX_PWD=$(($COLUMNS/4))
	local TRUNC="..."

	if [[ $PWD == $HOME* ]]; then
		NEW_PWD="~${PWD#$HOME}" 
	else
		NEW_PWD=${PWD}
	fi

	if [ ${#NEW_PWD} -gt $MAX_PWD ]; then
		local PWD_OFFSET=$(( ${#NEW_PWD} - $MAX_PWD + 3 ))
		newPWD="${TRUNC}${NEW_PWD:$PWD_OFFSET:$MAX_PWD}"
	fi
	echo $NEW_PWD
}

# ----------------------------------------------------------------------------
#  ::: PROMPT COMMAND FUNCTION ::::::::::::::::::::::::::::::::::::::::::::::
# ----------------------------------------------------------------------------
function nmn_PromptCommand
{
	#: foreground colors
	local BLACK="\[\033[0;30m\]"
	local RED="\[\033[0;31m\]"
	local GREEN="\[\033[0;32m\]"
	local YELLOW="\[\033[0;33m\]"
	local BLUE="\[\033[0;34m\]"
	local PURPLE="\[\033[0;35m\]"
	local CYAN="\[\033[0;36m\]"
	local GREY="\[\033[0;37m\]"
	#: empahsized colors
	local DARKGREY="\[\033[1;30m\]"
	local LIGHTRED="\[\033[1;31m\]"
	local LIGHTGREEN="\[\033[1;32m\]"
	local YELLOW="\[\033[1;33m\]"
	local LIGHTBLUE="\[\033[1;34m\]"
	local PINK="\[\033[1;35m\]"
	local LIGHTCYAN="\[\033[1;36m\]"
	local WHITE="\[\033[1;37m\]"
	#: background colors
	local BLACKBG="\[\033[40m\]"
	local REDBG="\[\033[41m\]"
	local GREENBG="\[\033[42m\]"
	local BROWNBG="\[\033[43m\]"
	local BLUEBG="\[\033[44m\]"
	local PURPLEBG="\[\033[45m\]"
	local CYANBG="\[\033[46m\]"
	local GREYBG="\[\033[47m\]"
	#: no colors / transe
	local NC="\[\033[0m\]"
	
	local LEFT=${GREEN}'('${NC}
	local RIGHT=${GREEN}')'${NC}
	local SPACER=' '
	local BREAK='|'
	local NL='\n'

	# ------------------------------------------------------------------------
	#  STATS & INFOS
	# ------------------------------------------------------------------------

	#: Current TTY
	export STATS_TTY=$(tty | awk -F/dev/ '{print $2}')

	#: Current Subshell
	export STATS_SUBSHELL='+'${SHLVL}

	if [ "$OS" = linux ]; then
		#: Current Uptime in hours:mins or days
		export STATS_UPTIME=$(uptime | awk -F' ' '{print $3}')

		#: Current Users logged in
		export STATS_USERS=$(uptime | awk -F' ' '{print $6}')

		#: Current load averages
		export STATS_LOAD=$(uptime | awk -F' ' '{print $10, $11, $12}')
	fi

	#: Backgrounded running jobs ---------------------------------------------
	local JOBS_BACKGROUND=$(jobs -r | wc -l )
	if [ ${JOBS_BACKGROUND} -gt 2 ]; then
		local STATS_JOBS_BACKGROUND=${RED}'BG:${JOBS_BACKGROUND}'${NC}
	elif [ ${JOBS_BACKGROUND} -gt 0 ]; then
		local STATS_JOBS_BACKGROUND=${GREEN}'BG:${JOBS_BACKGROUND}'${NC}
	else
		local STATS_JOBS_BACKGROUND=''
	fi
	
	#: Stopped Jobs ----------------------------------------------------------
	local JOBS_STOPPED=$(jobs -s | wc -l )
	if [ ${JOBS_STOPPED} -gt 2 ]; then
		local STATS_JOBS_STOPPED=${RED}'STP:${JOBS_STOPPED}'${NC}
	elif [ ${JOBS_STOPPED} -gt 0 ]; then
		local STATS_JOBS_STOPPED=${GREEN}'STP:${JOBS_STOPPED}'${NC}
	else
		local STATS_JOBS_STOPPED=''
	fi

	# Detached Screen Sessions -----------------------------------------------
	local SCREEN_DETACHED=$(screen -ls | grep -c Detach )
	if [ ${SCREEN_DETACHED} -gt 2 ]; then
		local STATS_SCREEN=${RED}'SCR:${SCREEN_DETACHED}'${NC}
	elif [ ${SCREEN_DETACHED} -gt 0 ]; then
		local STATS_SCREEN=${GREEN}'SCR:${SCREEN_DETACHED}'${NC}
	else
		local STATS_SCREEN=''
	fi

	#: Build personal Stats --------------------------------------------------
	export STATS_ME=''
	#[[ -n ${STATS_TTY} ]] && export STATS_ME=${STATS_ME}${STATS_TTY}
	#[[ -n ${STATS_SUBSHELL} ]] && export STATS_ME=${STATS_ME}${STATS_SUBSHELL}
	[[ -n ${STATS_SCREEN} ]] && export STATS_ME=${STATS_ME}${LEFT}${STATS_SCREEN}${RIGHT}
	[[ -n ${STATS_JOBS_BACKGROUND} ]] && export STATS_ME=${STATS_ME}${LEFT}${STATS_JOBS_BACKGROUND}${RIGHT}
	[[ -n ${STATS_JOBS_STOPPED} ]] && export STATS_ME=${STATS_ME}${LEFT}${STATS_JOBS_STOPPED}${RIGHT}
	export STATS_ME=${STATS_ME}

	#: Build system stats ----------------------------------------------------
	export STATS_SYS=''
	if [ "$OS" = linux ]; then
		if [[ "$STATS_UPTIME" =~ "," ]]; then
			echo "aaa: $STATS_UPTIME"
			export STATS_UPTIME=${STATS_UPTIME/,}
			export STATS_UPTIME=${STATS_UPTIME:0:2}
			[[ ${STATS_UPTIME} -lt 1 ]] && \ 
				export STATS_SYS=${STATS_UPTIME}' Hour'${BREAK} || \ 
				export STATS_SYS=${STATS_UPTIME}' Hours'${BREAK}
		else
			[[ ${STATS_UPTIME} -eq 1 ]] && \ 
				export STATS_SYS=${STATS_UPTIME}' Day'${BREAK} || \ 
				export STATS_SYS=${STATS_UPTIME}' Days'${BREAK}
		fi
		[[ ${STATS_USERS} -eq 1 ]] && export STATS_SYS=${STATS_SYS}${STATS_USERS}' User'${BREAK} || export STATS_SYS=${STATS_SYS}${STATS_USERS}' Users'${BREAK}
		export STATS_SYS=${STATS_SYS}'Load: '${STATS_LOAD}
	fi

	# ------------------------------------------------------------------------
	#  PWD
	# ------------------------------------------------------------------------

	#: Check if current directory is writeable
	if [ -w "${PWD}" ]; then
		local COLOR_PWD=${LIGHTGREEN}
	else
		local COLOR_PWD=${RED}
	fi
	local PROMPT_PWD=${COLOR_PWD}$(nmn_PromptTrimWorkingDir)${NC}

	# ------------------------------------------------------------------------
	#  DAY & TIME
	# ------------------------------------------------------------------------
	
	#: Current Time
	local TIME=${LEFT}${GREY}'\A'${NC}${RIGHT}
	
	#: Check if the day has changed :-)
	if [ -z ${DAY-} ] ; then
		local DAY_CHANGED=''
		export DAY=$(date +%A)
	else
		local TODAY=$(date +%A)
		if [ "${DAY}" != "${TODAY}" ]; then
			local DAY_CHANGED=${NL}${WHITE}
			local DAY_CHANGED=${DAY_CHANGED}"# ------------------------------------------------------------------------- "${NL}
			local DAY_CHANGED=${DAY_CHANGED}"#   ${YELLOW}Yippieh!${WHITE} Ein neuer Tag hat begonnen: ${LIGHTRED}$(date '+%A, der %d. %B %Y') ${WHITE}!"${NL}
			local DAY_CHANGED=${DAY_CHANGED}"# ------------------------------------------------------------------------- "${NL}${NC}
			export DAY=$TODAY
		else
			local DAY_CHANGED=''
		fi
	fi

	# ------------------------------------------------------------------------
	#  SSH CONNECTION
	# ------------------------------------------------------------------------

	#: Check if we are running on SSH
	if [[ ${SSH_CLIENT-} ]] || [[ ${SSH2_CLIENT-} ]]; then
		local SSH_FLAG=1
		export CONNECTION='ssh://'
	else
		local SSH_FLAG=0
		export CONNECTION='local://'
	fi

	# ------------------------------------------------------------------------
	#  USER
	# ------------------------------------------------------------------------

	#: Current User
	if [ ${UID} -eq 0 ] ; then
		if [ "${USER}" == "${LOGNAME}" ]; then
			if [[ ${SUDO_USER} ]]; then
				local COLOR_USER=${RED}
			else
				local COLOR_USER=${LIGHTRED}
			fi
		else
			local COLOR_USER=${YELLOW}
		fi
	else
		if [ "${USER}" == "${LOGNAME}" ]; then
			local COLOR_USER=${GREEN}
		else
			local COLOR_USER=${LIGHTGREEN}
		fi
	fi
	local PROMPT_USER=${COLOR_USER}'\u'${NC}

	# ------------------------------------------------------------------------
	#  HOST
	# ------------------------------------------------------------------------

	#: Current Host
	case ${FQDN} in
		nbnorm*|MacBookPro*)
			# ................................ My local system is always GREEN
			local COLOR_HOST=${GREEN}
			export CONNECTION=''
			;;
		cmt*|cch*)
			# .................................... CC-Holding servers are PINK
			local COLOR_HOST=${PINK}
			;;
		srv*|server.ima.local)
			# ......................................... IMA servers are YELLOW
			local COLOR_HOST=${YELLOW}
			;;
		mxs*|amadeus*|*zwf.de)
			# ........................................ Customer server are RED
			local COLOR_HOST=${RED}
			;;
		*)
			# ..................................... All other servers are GREY
			local COLOR_HOST=${GREY}
			;;
	esac
	local PROMPT_HOST=${COLOR_HOST}'\H'${NC}

	# ------------------------------------------------------------------------
	#  LAST COMMAND - Get the last command (sanitized) to output in title
	# ------------------------------------------------------------------------
	export LAST_CMD="`history 1|sed -e "s/^[\ 0-9]*//; s/[\d0\d31\d34\d39\d96\d127]*//g; s/\(.\{1,50\}\).*$/\1/g"`";

	# ------------------------------------------------------------------------
	#  EXIT STATUS
	# ------------------------------------------------------------------------
	#EXIT_STATUS="\[\`let exitstatus=\$?; if [[ \${exitstatus} != 0 ]]; then echo \"\[${RED}\][EXIT:\${exitstatus}]\[${WHITE}\]\${LAST_CMD}]\"; fi\`\]"
	EXIT_STATUS="\[\`let exitstatus=\$?; if [[ \${exitstatus} != 0 ]]; then echo \"\[${RED}\][ERR:\${exitstatus}]${SPACER}\[${NC}\]\"; fi\`\]"

	# ------------------------------------------------------------------------
	#  COMMAND
	# ------------------------------------------------------------------------
	if [[ ${UID} -eq 0 ]] ; then
		local CMD_SYMBOL='#>'
		if [[ ${SUDO_USER} ]]; then
			local COLOR_CMD=${RED}
		else
			local COLOR_CMD=${LIGHTRED}
		fi
	else
		local CMD_SYMBOL='$'
		local COLOR_CMD=${GREEN}
	fi
	if [[ ${COLUMNS} -le 100 ]] ; then
		local COMMAND=${NL}${COLOR_CMD}${CMD_SYMBOL}${NC}${SPACER}
	else
		local COMMAND=${COLOR_CMD}${CMD_SYMBOL}${NC}${SPACER}
	fi

	# ------------------------------------------------------------------------
	#  BUILD DNA
	# ------------------------------------------------------------------------
	#local PROMPT_DNA=${BREAK}${LEFT}${CYAN}${CONNECTION}${NC}${PROMPT_USER}${CYAN}'@'${NC}${PROMPT_HOST}${RIGHT}${BREAK}${LEFT}${PROMPT_PWD}${RIGHT}
	#local PROMPT_DNA=${LEFT}${GREY}${CONNECTION}${NC}${PROMPT_USER}${GREY}'@'${NC}${PROMPT_HOST}${GREY}':'${PROMPT_PWD}${RIGHT}
	local PROMPT_DNA=${GREY}${CONNECTION}${NC}${PROMPT_USER}${GREY}'@'${NC}${PROMPT_HOST}${GREY}':'${PROMPT_PWD}${SPACER}
	
	# ------------------------------------------------------------------------
	#  TITLEBAR
	# ------------------------------------------------------------------------
	local TITLE='[ ${LAST_CMD}... ] ${CONNECTION}\u@\H:$(nmn_PromptTrimWorkingDir) (${STATS_SUBSHELL}) ${STATS_ME} [${STATS_SYS}]'

 	#: Set Titlebar if we are not on xterm
	case ${TERM} in 
        screen* )
            local TITLEBAR='\[\033k\w\033\134\]'
            ;;
		xterm* )
			local TITLEBAR='\[\033]0;'${TITLE}'\007\]'
			;;
		* )
			local TITLEBAR=''
			;;
	esac

	# ------------------------------------------------------------------------
	#  PROMPT (default is: "\s-\v\$ ")
	# ------------------------------------------------------------------------
	PS1=${DAY_CHANGED}${NL}${TIME}${SPACER}${EXIT_STATUS}${STATS_ME}${PROMPT_DNA}${TITLEBAR}${COMMAND}
	#PS1=${DAY_CHANGED}${NL}${TIME}${SPACER}${STATS_ME}${PROMPT_DNA}${TITLEBAR}${COMMAND}

	#: This appends the last command to the $HISTFILE
	history -a
	
	#: This outputs 3 terminal escape sequences according to the terminal in
	#> use and its capabilities.. so very robust, should work on any shell 
	#> newer than 1984. By echoing the following 3 term names separated by a
	#> newline \n and using tput -S it will output the terminal sequences for
	#> all 3. sgr0 resets the colors, cnorm resets the cursor, and rmso resets
	#> the background color.
	echo -e "sgr0\ncnorm\nrmso"|tput -S
}

# ----------------------------------------------------------------------------
#  ::: PROMPT SWITCHER ::::::::::::::::::::::::::::::::::::::::::::::::::::::
# ----------------------------------------------------------------------------
#prompt
# {
#    case "$1" in
#        d)
#            PS1='$(dirs) \$ '
#        ;;
#        n)
#            PS1='\$ '
#    esac
#}


# ----------------------------------------------------------------------------
#  ::: PROMPT BUILD FUNCTION ::::::::::::::::::::::::::::::::::::::::::::::::
# ----------------------------------------------------------------------------
function nmn_LoadPrompt
{
	PROMPT_COMMAND=nmn_PromptCommand
	export PS1 PROMPT_COMMAND

	export PS2='> '    # Secondary prompt (default is: "> ")
	export PS3='#? '   # Prompt 3 (prompt for select command)
	export PS4='+'     # Prompt 4 (default is: "+")
	
	#: This cuts all colors from the prompt..
	#export PS1=$(sed 's/\\[eE][[0-9]*;[0-9]*m//g' <<< $PS1);
}

nmn_LoadPrompt
